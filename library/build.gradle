//noinspection GradleCompatible
apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 2
        versionName "1.1"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    implementation 'com.google.firebase:firebase-database:11.8.0'
    //noinspection GradleCompatible
    provided 'com.android.support:recyclerview-v7:25.3.1'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equalsIgnoreCase("debug")) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
        doFirst { classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar) }
        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference");
        failOnError false
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

if (!android.defaultConfig.versionName.contains("SNAPSHOT")) {
    apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
}

//apply plugin: 'com.google.gms.google-services'
